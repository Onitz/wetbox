https://www.youtube.com/watch?v=-PR_XqW9JJU
--------------------------------------------
tsc tstut.ts --target ES6
tsc *.ts --watch --target ES6

^ this compiles everything from typescript into javascript 


Variables _A-Za-z0-9
ooo you can have typeless types lol (anything)

var myName: string = "Dabson";
var myAge: number = 41;
var canVote: boolean = true;
var anything: any = "dog";

null | undefined
anything will still have a data type
interface: complex data types

What typescript can't do:
	* Define RegExp patterns for type value
	* Define validation like string length
	* Number ranges
	* etc.

You cant push a number to a string array (no mixed typing?)

typescript can do for..of (js just for..in)

// for(x in y) prints INDEXES
// for(x of y) prints VALUES

typed functions (includes return type)
var getSum = function(
	num1: number, 
	num2: number): number {
	return num1 + num2;
}

// TS private values are automatically assigned & registered to that class
constructor(private name: string, private owner: string ){}

omg, those typescript getters and setters syntaxes are so much sexier ^^ 

	get weight(): number {
		return this._weight;
	}

	set weight( weight: number ) {
		this._weight = weight;
	}

	ani.weight = 23;
	writeLn( ani.weight );

extends permits inheritance 

class Dog extends Animal{
	constructor(name: string, owner: string) {
		super(name, owner);
	}
}

any type of datatype 

Data Type markers:
function getType<T>